name: 'Provision Sleipnir Infrastructure'

on:
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: "Configure AWS Credentials"
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: eu-west-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=bootstrap/infrastructure init
      env:
        TF_VAR_SLEIPNIR: ${{ secrets.SLEIPNIR_PK }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir=bootstrap/infrastructure plan -lock=false
      env:
        TF_VAR_SLEIPNIR: ${{ secrets.SLEIPNIR_PK }}

    - name: Terraform Apply
     # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform -chdir=bootstrap/infrastructure apply -auto-approve -lock=false
      env:
        TF_VAR_SLEIPNIR: ${{ secrets.SLEIPNIR_PK }}
  
  run-if-failed:
    runs-on: ubuntu-latest
    needs: [terraform]
    if: always() && (needs.terraform.result == 'failure')
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: "Configure AWS Credentials"
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: eu-west-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform -chdir=bootstrap/infrastructure init

    - name: Terraform Destroy
      run: terraform -chdir=bootstrap/infrastructure destroy -auto-approve -lock=false